{"version":3,"file":"gaussian-splat-3d.module.js","sources":["../src/SplatBuffer.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/octree/OctreeNode.js","../src/octree/Octree.js","../src/Constants.js","../src/worker/SortWorker.js","../src/Viewer.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\nconst tempVector3A = new THREE.Vector3();\r\nconst tempVector3B = new THREE.Vector3();\r\nconst tempVector4A = new THREE.Vector4();\r\nconst tempVector4B = new THREE.Vector4();\r\nconst tempQuaternion4A = new THREE.Quaternion();\r\nconst tempQuaternion4B = new THREE.Quaternion();\r\n\r\nexport class SplatBuffer {\r\n\r\n    // Row format:\r\n    //     Center position (XYZ) - Float32 * 3\r\n    //     Scale (XYZ)  - Float32 * 3\r\n    //     Color (RGBA) - Uint8 * 4\r\n    //     Rotation (IJKW) - Float32 * 4\r\n\r\n    static PositionComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n\r\n    static RowSizeBytes = 44;\r\n    static RowSizeFloats = 11;\r\n    static PositionSizeFloats = 3;\r\n    static PositionSizeBytes = 12;\r\n    static CovarianceSizeFloats = 6;\r\n    static CovarianceSizeBytes = 24;\r\n    static ColorSizeFloats = 4;\r\n    static ColorSizeBytes = 16;\r\n\r\n    static ScaleRowOffsetFloats = 3;\r\n    static ScaleRowOffsetBytes = 12;\r\n    static ColorRowOffsetBytes = 24;\r\n    static RotationRowOffsetFloats = 7;\r\n    static RotationRowOffsetBytes = 28;\r\n\r\n    constructor(bufferDataOrVertexCount) {\r\n        if (typeof bufferDataOrVertexCount === 'number') {\r\n            this.bufferData = new ArrayBuffer(SplatBuffer.RowSizeBytes * bufferDataOrVertexCount);\r\n            this.floatArray = new Float32Array(this.bufferData);\r\n            this.uint8Array = new Uint8Array(this.bufferData);\r\n            this.precomputedCovarianceBufferData = null;\r\n            this.precomputedColorBufferData = null;\r\n        } else {\r\n            this.bufferData = bufferDataOrVertexCount;\r\n            this.floatArray = new Float32Array(this.bufferData);\r\n            this.uint8Array = new Uint8Array(this.bufferData);\r\n            this.precomputedCovarianceBufferData = null;\r\n            this.precomputedColorBufferData = null;\r\n        }\r\n    }\r\n\r\n    optimize(minAlpha) {\r\n        let vertexCount = this.getVertexCount();\r\n        const oldVertexCount = vertexCount;\r\n        const oldByteCount = vertexCount * SplatBuffer.RowSizeBytes;\r\n\r\n        let index = 0;\r\n        while (index < vertexCount) {\r\n            const colorBase = SplatBuffer.RowSizeBytes * index + SplatBuffer.ColorRowOffsetBytes;\r\n            const baseAlpha = this.uint8Array[colorBase + 3];\r\n            if (baseAlpha <= minAlpha) {\r\n                this.swapVertices(index, vertexCount - 1);\r\n                vertexCount--;\r\n            } else {\r\n                index++;\r\n            }\r\n        }\r\n\r\n        const newByteCount = vertexCount * SplatBuffer.RowSizeBytes;\r\n\r\n        console.log('Splat buffer optimization');\r\n        console.log('-------------------------------');\r\n        console.log('Old vertex count: ' + oldVertexCount);\r\n        console.log('Old byte count: ' + oldByteCount);\r\n        console.log('New vertex count: ' + vertexCount);\r\n        console.log('New byte count: ' + newByteCount);\r\n        console.log('Splat count reduction: ' + ((oldByteCount - newByteCount) / oldByteCount * 100).toFixed(3) + '%');\r\n        console.log('==============================');\r\n        console.log('');\r\n\r\n        const newFloatArray = this.floatArray.slice(0, vertexCount * SplatBuffer.RowSizeFloats);\r\n        this.bufferData = newFloatArray.buffer;\r\n        this.floatArray = new Float32Array(this.bufferData);\r\n        this.uint8Array = new Uint8Array(this.bufferData);\r\n    }\r\n\r\n    buildPreComputedBuffers() {\r\n        const vertexCount = this.getVertexCount();\r\n\r\n        this.precomputedCovarianceBufferData = new ArrayBuffer(SplatBuffer.CovarianceSizeBytes * vertexCount);\r\n        const covarianceArray = new Float32Array(this.precomputedCovarianceBufferData);\r\n\r\n        this.precomputedColorBufferData = new ArrayBuffer(SplatBuffer.ColorSizeBytes * vertexCount);\r\n        const colorArray = new Float32Array(this.precomputedColorBufferData);\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n\r\n            const colorBase = SplatBuffer.RowSizeBytes * i + SplatBuffer.ColorRowOffsetBytes;\r\n            colorArray[SplatBuffer.ColorSizeFloats * i] = this.uint8Array[colorBase] / 255;\r\n            colorArray[SplatBuffer.ColorSizeFloats * i + 1] = this.uint8Array[colorBase + 1] / 255;\r\n            colorArray[SplatBuffer.ColorSizeFloats * i + 2] = this.uint8Array[colorBase + 2] / 255;\r\n            colorArray[SplatBuffer.ColorSizeFloats * i + 3] = this.uint8Array[colorBase + 3] / 255;\r\n\r\n            const scaleBase = SplatBuffer.RowSizeFloats * i + SplatBuffer.ScaleRowOffsetFloats;\r\n            scale.set(this.floatArray[scaleBase], this.floatArray[scaleBase + 1], this.floatArray[scaleBase + 2]);\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            const rotationBase = SplatBuffer.RowSizeFloats * i + SplatBuffer.RotationRowOffsetFloats;\r\n            rotation.set(this.floatArray[rotationBase + 1],\r\n                         this.floatArray[rotationBase + 2],\r\n                         this.floatArray[rotationBase + 3],\r\n                         this.floatArray[rotationBase]);\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            const M = covarianceMatrix.elements;\r\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i] = M[0] * M[0] + M[3] * M[3] + M[6] * M[6];\r\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 1] = M[0] * M[1] + M[3] * M[4] + M[6] * M[7];\r\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 2] = M[0] * M[2] + M[3] * M[5] + M[6] * M[8];\r\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 3] = M[1] * M[1] + M[4] * M[4] + M[7] * M[7];\r\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 4] = M[1] * M[2] + M[4] * M[5] + M[7] * M[8];\r\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 5] = M[2] * M[2] + M[5] * M[5] + M[8] * M[8];\r\n        }\r\n    }\r\n\r\n    getBufferData() {\r\n        return this.bufferData;\r\n    }\r\n\r\n    getPosition(index, outPosition = new THREE.Vector3()) {\r\n        const positionBase = SplatBuffer.RowSizeFloats * index;\r\n        outPosition.set(this.floatArray[positionBase], this.floatArray[positionBase + 1], this.floatArray[positionBase + 2]);\r\n        return outPosition;\r\n    }\r\n\r\n    setPosition(index, position) {\r\n        const positionBase = SplatBuffer.RowSizeFloats * index;\r\n        this.floatArray[positionBase] = position.x;\r\n        this.floatArray[positionBase + 1] = position.y;\r\n        this.floatArray[positionBase + 2] = position.z;\r\n    }\r\n\r\n    getScale(index, outScale = new THREE.Vector3()) {\r\n        const scaleBase = SplatBuffer.RowSizeFloats * index + SplatBuffer.ScaleRowOffsetFloats;\r\n        outScale.set(this.floatArray[scaleBase], this.floatArray[scaleBase + 1], this.floatArray[scaleBase + 2]);\r\n        return outScale;\r\n    }\r\n\r\n    setScale(index, scale) {\r\n        const scaleBase = SplatBuffer.RowSizeFloats * index + SplatBuffer.ScaleRowOffsetFloats;\r\n        this.floatArray[scaleBase] = scale.x;\r\n        this.floatArray[scaleBase + 1] = scale.y;\r\n        this.floatArray[scaleBase + 2] = scale.z;\r\n    }\r\n\r\n    getRotation(index, outRotation = new THREE.Quaternion()) {\r\n        const rotationBase = SplatBuffer.RowSizeFloats * index + SplatBuffer.RotationRowOffsetFloats;\r\n        outRotation.set(this.floatArray[rotationBase + 1], this.floatArray[rotationBase + 2],\r\n                        this.floatArray[rotationBase + 3], this.floatArray[rotationBase]);\r\n        return outRotation;\r\n    }\r\n\r\n    setRotation(index, rotation) {\r\n        const rotationBase = SplatBuffer.RowSizeFloats * index + SplatBuffer.RotationRowOffsetFloats;\r\n        this.floatArray[rotationBase] = rotation.w;\r\n        this.floatArray[rotationBase + 1] = rotation.x;\r\n        this.floatArray[rotationBase + 2] = rotation.y;\r\n        this.floatArray[rotationBase + 3] = rotation.z;\r\n    }\r\n\r\n    getColor(index, outColor = new THREE.Vector4()) {\r\n        const colorBase = SplatBuffer.RowSizeBytes * index + SplatBuffer.ColorRowOffsetBytes;\r\n        outColor.set(this.uint8Array[colorBase], this.uint8Array[colorBase + 1],\r\n                     this.uint8Array[colorBase + 2], this.uint8Array[colorBase + 3]);\r\n        return outColor;\r\n    }\r\n\r\n    setColor(index, color) {\r\n        const colorBase = SplatBuffer.RowSizeBytes * index + SplatBuffer.ColorRowOffsetBytes;\r\n        this.uint8Array[colorBase] = color.x;\r\n        this.uint8Array[colorBase + 1] = color.y;\r\n        this.uint8Array[colorBase + 2] = color.z;\r\n        this.uint8Array[colorBase + 3] = color.w;\r\n    }\r\n\r\n    getPrecomputedCovarianceBufferData() {\r\n        return this.precomputedCovarianceBufferData;\r\n    }\r\n\r\n    getPrecomputedColorBufferData() {\r\n        return this.precomputedColorBufferData;\r\n    }\r\n\r\n    getVertexCount() {\r\n        return this.bufferData.byteLength / SplatBuffer.RowSizeBytes;\r\n    }\r\n\r\n    fillPositionArray(outPositionArray) {\r\n        const vertexCount = this.getVertexCount();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const outPositionBase = i * SplatBuffer.PositionComponentCount;\r\n            const srcPositionBase = SplatBuffer.RowSizeFloats * i;\r\n            outPositionArray[outPositionBase] = this.floatArray[srcPositionBase];\r\n            outPositionArray[outPositionBase + 1] = this.floatArray[srcPositionBase + 1];\r\n            outPositionArray[outPositionBase + 2] = this.floatArray[srcPositionBase + 2];\r\n        }\r\n    }\r\n\r\n    fillScaleArray(outScaleArray) {\r\n        const vertexCount = this.getVertexCount();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const outScaleBase = i * SplatBuffer.ScaleComponentCount;\r\n            const srcScaleBase = SplatBuffer.RowSizeFloats * i + SplatBuffer.ScaleRowOffsetFloats;\r\n            outScaleArray[outScaleBase] = this.floatArray[srcScaleBase];\r\n            outScaleArray[outScaleBase + 1] = this.floatArray[srcScaleBase + 1];\r\n            outScaleArray[outScaleBase + 2] = this.floatArray[srcScaleBase + 2];\r\n        }\r\n    }\r\n\r\n    fillRotationArray(outRotationArray) {\r\n        const vertexCount = this.getVertexCount();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const outRotationBase = i * SplatBuffer.RotationComponentCount;\r\n            const srcRotationBase = SplatBuffer.RowSizeFloats * i + SplatBuffer.RotationRowOffsetFloats;\r\n            outRotationArray[outRotationBase] = this.floatArray[srcRotationBase];\r\n            outRotationArray[outRotationBase + 1] = this.floatArray[srcRotationBase + 1];\r\n            outRotationArray[outRotationBase + 2] = this.floatArray[srcRotationBase + 2];\r\n            outRotationArray[outRotationBase + 3] = this.floatArray[srcRotationBase + 3];\r\n        }\r\n    }\r\n\r\n    fillColorArray(outColorArray) {\r\n        const vertexCount = this.getVertexCount();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const outColorBase = i * SplatBuffer.ColorComponentCount;\r\n            const srcColorBase = SplatBuffer.RowSizeBytes * i + SplatBuffer.ColorRowOffsetBytes;\r\n            outColorArray[outColorBase] = this.uint8Array[srcColorBase];\r\n            outColorArray[outColorBase + 1] = this.uint8Array[srcColorBase + 1];\r\n            outColorArray[outColorBase + 2] = this.uint8Array[srcColorBase + 2];\r\n            outColorArray[outColorBase + 3] = this.uint8Array[srcColorBase + 3];\r\n        }\r\n    }\r\n\r\n    swapVertices(indexA, indexB) {\r\n\r\n        this.getPosition(indexA, tempVector3A);\r\n        this.getPosition(indexB, tempVector3B);\r\n        this.setPosition(indexB, tempVector3A);\r\n        this.setPosition(indexA, tempVector3B);\r\n\r\n        this.getScale(indexA, tempVector3A);\r\n        this.getScale(indexB, tempVector3B);\r\n        this.setScale(indexB, tempVector3A);\r\n        this.setScale(indexA, tempVector3B);\r\n\r\n        this.getRotation(indexA, tempQuaternion4A);\r\n        this.getRotation(indexB, tempQuaternion4B);\r\n        this.setRotation(indexB, tempQuaternion4A);\r\n        this.setRotation(indexA, tempQuaternion4B);\r\n\r\n        this.getColor(indexA, tempVector4A);\r\n        this.getColor(indexB, tempVector4B);\r\n        this.setColor(indexB, tempVector4A);\r\n        this.setColor(indexA, tempVector4B);\r\n\r\n    }\r\n\r\n    copyVertexFromSplatBuffer(otherSplatBuffer, srcIndex, destIndex) {\r\n        const srcArray = new Float32Array(otherSplatBuffer.bufferData, srcIndex * SplatBuffer.RowSizeBytes, SplatBuffer.RowSizeFloats);\r\n        const destArray = new Float32Array(this.bufferData, destIndex * SplatBuffer.RowSizeBytes, SplatBuffer.RowSizeFloats);\r\n        destArray.set(srcArray);\r\n    }\r\n\r\n}\r\n","import { SplatBuffer } from './SplatBuffer.js';\r\nimport * as THREE from 'three';\r\n\r\nexport class PlyParser {\r\n\r\n    constructor(plyBuffer) {\r\n        this.plyBuffer = plyBuffer;\r\n    }\r\n\r\n    decodeHeader(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n\r\n        while (true) {\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, 50);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += 50;\r\n            if (headerText.includes('end_header')) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const headerLines = headerText.split('\\n');\r\n\r\n        let vertexCount = 0;\r\n        let propertyTypes = {};\r\n\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element vertex')) {\r\n                const vertexCountMatch = line.match(/\\d+/);\r\n                if (vertexCountMatch) {\r\n                    vertexCount = parseInt(vertexCountMatch[0]);\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (propertyMatch) {\r\n                    const propertyType = propertyMatch[2];\r\n                    const propertyName = propertyMatch[3];\r\n                    propertyTypes[propertyName] = propertyType;\r\n                }\r\n            } else if (line === 'end_header') {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\r\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\r\n\r\n        return {\r\n            'vertexCount': vertexCount,\r\n            'propertyTypes': propertyTypes,\r\n            'vertexData': vertexData,\r\n            'headerOffset': headerOffset\r\n        };\r\n    }\r\n\r\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\r\n        let rawVertex = outVertex || {};\r\n        for (let property of propertiesToRead) {\r\n            const propertyType = propertyTypes[property];\r\n            if (propertyType === 'float') {\r\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\r\n            } else if (propertyType === 'uchar') {\r\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseToSplatBuffer() {\r\n\r\n        console.time('PLY load');\r\n\r\n        const {vertexCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\r\n\r\n        // figure out the SH degree from the number of coefficients\r\n        let nRestCoeffs = 0;\r\n        for (const propertyName in propertyTypes) {\r\n            if (propertyName.startsWith('f_rest_')) {\r\n                nRestCoeffs += 1;\r\n            }\r\n        }\r\n        const nCoeffsPerColor = nRestCoeffs / 3;\r\n\r\n        // TODO: Eventually properly support multiple degree spherical harmonics\r\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\r\n        const sphericalHarmonicsDegree = 0;\r\n\r\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\r\n\r\n        // figure out the order in which spherical harmonics should be read\r\n        const shFeatureOrder = [];\r\n        for (let rgb = 0; rgb < 3; ++rgb) {\r\n            shFeatureOrder.push(`f_dc_${rgb}`);\r\n        }\r\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\r\n            for (let rgb = 0; rgb < 3; ++rgb) {\r\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\r\n            }\r\n        }\r\n\r\n        let plyRowSize = 0;\r\n        let fieldOffsets = {};\r\n        const fieldSize = {\r\n            'double': 8,\r\n            'int': 4,\r\n            'uint': 4,\r\n            'float': 4,\r\n            'short': 2,\r\n            'ushort': 2,\r\n            'uchar': 1,\r\n        };\r\n        for (let fieldName in propertyTypes) {\r\n            if (propertyTypes.hasOwnProperty(fieldName)) {\r\n                const type = propertyTypes[fieldName];\r\n                fieldOffsets[fieldName] = plyRowSize;\r\n                plyRowSize += fieldSize[type];\r\n            }\r\n        }\r\n\r\n        let rawVertex = {};\r\n\r\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\r\n\r\n        console.time('Importance computations');\r\n        let sizeList = new Float32Array(vertexCount);\r\n        let sizeIndex = new Uint32Array(vertexCount);\r\n        for (let row = 0; row < vertexCount; row++) {\r\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\r\n            sizeIndex[row] = row;\r\n            if (!propertyTypes['scale_0']) continue;\r\n            const size = Math.exp(rawVertex.scale_0) * Math.exp(rawVertex.scale_1) * Math.exp(rawVertex.scale_2);\r\n            const opacity = 1 / (1 + Math.exp(-rawVertex.opacity));\r\n            sizeList[row] = size * opacity;\r\n        }\r\n        console.timeEnd('Importance computations');\r\n\r\n        console.time('Importance sort');\r\n        sizeIndex.sort((b, a) => sizeList[a] - sizeList[b]);\r\n        console.timeEnd('Importance sort');\r\n\r\n\r\n        const splatBufferData = new ArrayBuffer(SplatBuffer.RowSizeBytes * vertexCount);\r\n\r\n        for (let j = 0; j < vertexCount; j++) {\r\n            const row = sizeIndex[j];\r\n            const offset = row * plyRowSize;\r\n            this.readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\r\n            const position = new Float32Array(splatBufferData, j * SplatBuffer.RowSizeBytes, 3);\r\n            const scales = new Float32Array(splatBufferData, j * SplatBuffer.RowSizeBytes + SplatBuffer.ScaleRowOffsetBytes, 3);\r\n            const rgba = new Uint8ClampedArray(splatBufferData, j * SplatBuffer.RowSizeBytes + SplatBuffer.ColorRowOffsetBytes, 4,);\r\n            const rot = new Float32Array(splatBufferData, j * SplatBuffer.RowSizeBytes + SplatBuffer.RotationRowOffsetBytes, 4);\r\n\r\n            if (propertyTypes['scale_0']) {\r\n                const quat = new THREE.Quaternion(rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3, rawVertex.rot_0);\r\n                quat.normalize();\r\n                rot.set([quat.w, quat.x, quat.y, quat.z]);\r\n                scales.set([Math.exp(rawVertex.scale_0), Math.exp(rawVertex.scale_1), Math.exp(rawVertex.scale_2)]);\r\n            } else {\r\n                scales.set([0.01, 0.01, 0.01]);\r\n                rot.set([1.0, 0.0, 0.0, 0.0]);\r\n            }\r\n\r\n            position.set([rawVertex.x, rawVertex.y, rawVertex.z]);\r\n\r\n            if (propertyTypes['f_dc_0']) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                rgba.set([(0.5 + SH_C0 * rawVertex.f_dc_0) * 255,\r\n                          (0.5 + SH_C0 * rawVertex.f_dc_1) * 255,\r\n                          (0.5 + SH_C0 * rawVertex.f_dc_2) * 255]);\r\n            } else {\r\n                rgba.set([255, 0, 0]);\r\n            }\r\n            if (propertyTypes['opacity']) {\r\n                rgba[3] = (1 / (1 + Math.exp(-rawVertex.opacity))) * 255;\r\n            } else {\r\n                rgba[3] = 255;\r\n            }\r\n        }\r\n\r\n        console.timeEnd('PLY load');\r\n\r\n        const splatBuffer = new SplatBuffer(splatBufferData);\r\n        return splatBuffer;\r\n\r\n    }\r\n}\r\n","import { PlyParser } from './PlyParser.js';\r\n\r\nexport class PlyLoader {\r\n\r\n    constructor() {\r\n        this.splatBuffer = null;\r\n    }\r\n\r\n    fetchFile(fileName) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(fileName)\r\n            .then((res) => {\r\n                return res.arrayBuffer();\r\n            })\r\n            .then((data) => {\r\n                resolve(data);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    loadFromFile(fileName) {\r\n        return new Promise((resolve, reject) => {\r\n            const loadPromise = this.fetchFile(fileName);\r\n            loadPromise\r\n            .then((plyFileData) => {\r\n                const plyParser = new PlyParser(plyFileData);\r\n                const splatBuffer = plyParser.parseToSplatBuffer();\r\n                this.splatBuffer = splatBuffer;\r\n                resolve(splatBuffer);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n","import { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatLoader {\r\n\r\n    constructor(splatBuffer = null) {\r\n        this.splatBuffer = splatBuffer;\r\n        this.downLoadLink = null;\r\n    }\r\n\r\n    loadFromFile(fileName) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(fileName)\r\n            .then((res) => {\r\n                return res.arrayBuffer();\r\n            })\r\n            .then((bufferData) => {\r\n                const splatBuffer = new SplatBuffer(bufferData);\r\n                resolve(splatBuffer);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    setFromBuffer(splatBuffer) {\r\n        this.splatBuffer = splatBuffer;\r\n    }\r\n\r\n    saveToFile(fileName) {\r\n        const splatData = new Uint8Array(this.splatBuffer.getBufferData());\r\n        const blob = new Blob([splatData.buffer], {\r\n            type: 'application/octet-stream',\r\n        });\r\n\r\n        if (!this.downLoadLink) {\r\n            this.downLoadLink = document.createElement('a');\r\n            document.body.appendChild(this.downLoadLink);\r\n        }\r\n        this.downLoadLink.download = fileName;\r\n        this.downLoadLink.href = URL.createObjectURL(blob);\r\n        this.downLoadLink.click();\r\n    }\r\n\r\n}\r\n","import {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","export class LoadingSpinner {\r\n\r\n    constructor(message) {\r\n        this.message = message || 'Loading...';\r\n\r\n        this.spinnerDivContainer = document.createElement('div');\r\n        this.spinnerDiv = document.createElement('div');\r\n        this.messageDiv = document.createElement('div');\r\n        this.spinnerDivContainer.className = 'loaderContainer';\r\n        this.spinnerDiv.className = 'loader';\r\n        this.spinnerDivContainer.style.display = 'none';\r\n        this.messageDiv.className = 'message';\r\n        this.messageDiv.innerHTML = this.message;\r\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\r\n        this.spinnerDivContainer.appendChild(this.messageDiv);\r\n        document.body.appendChild(this.spinnerDivContainer);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .message {\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                padding-top:15px;\r\n            }\r\n\r\n            .loaderContainer {\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-60px, -60px);\r\n                width: 120px;\r\n            }\r\n\r\n            .loader {\r\n                width: 120px;        /* the size */\r\n                padding: 15px;       /* the border thickness */\r\n                background: #07e8d6; /* the color */\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        document.getElementsByTagName('head')[0].appendChild(style);\r\n    }\r\n\r\n    show() {\r\n        this.spinnerDivContainer.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerDivContainer.style.display = 'none';\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nlet idGen = 0;\r\n\r\nexport class OctreeNode {\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || idGen++;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { OctreeNode } from './OctreeNode.js';\r\n\r\nexport class Octree {\r\n\r\n    constructor(maxDepth, maxPositionsPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxPositionsPerNode = maxPositionsPerNode;\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.rootNode = null;\r\n        this.addedIndexes = {};\r\n        this.nodesWithIndexes = [];\r\n    }\r\n\r\n    processScene(splatBuffer) {\r\n        this.nodesWithIndexes = [];\r\n        const vertexCount = splatBuffer.getVertexCount();\r\n\r\n        const position = new THREE.Vector3();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            splatBuffer.getPosition(i, position);\r\n            if (i === 0 || position.x < this.sceneMin.x) this.sceneMin.x = position.x;\r\n            if (i === 0 || position.x > this.sceneMax.x) this.sceneMax.x = position.x;\r\n            if (i === 0 || position.y < this.sceneMin.y) this.sceneMin.y = position.y;\r\n            if (i === 0 || position.y > this.sceneMax.y) this.sceneMax.y = position.y;\r\n            if (i === 0 || position.z < this.sceneMin.z) this.sceneMin.z = position.z;\r\n            if (i === 0 || position.z > this.sceneMax.z) this.sceneMax.z = position.z;\r\n        }\r\n\r\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\r\n\r\n        const indexes = [];\r\n        for (let i = 0; i < vertexCount; i ++)indexes.push(i);\r\n        this.rootNode = new OctreeNode(this.sceneMin, this.sceneMax, 0);\r\n        this.rootNode.data = {\r\n            'indexes': indexes\r\n        };\r\n        this.processNode(this.rootNode, splatBuffer);\r\n    }\r\n\r\n    processNode(node, splatBuffer) {\r\n        const vertexCount = node.data.indexes.length;\r\n\r\n        if (vertexCount < this.maxPositionsPerNode || node.depth > this.maxDepth) {\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (this.addedIndexes[node.data.indexes[i]]) {\r\n                    node.data.indexes.splice(i, 1);\r\n                } else {\r\n                    this.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            this.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\r\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\r\n\r\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\r\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\r\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\r\n        ];\r\n\r\n        const vertexCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            vertexCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const position = new THREE.Vector3();\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const splatIndex = node.data.indexes[i];\r\n            splatBuffer.getPosition(splatIndex, position);\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(position)) {\r\n                    vertexCounts[j]++;\r\n                    baseIndexes[j].push(splatIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new OctreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            this.processNode(child, splatBuffer);\r\n        }\r\n    }\r\n\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        return visitLeavesFromNode(this.rootNode, visitFunc);\r\n    }\r\n}\r\n","export class Constants {\r\n\r\n    static DepthMapRange = 1 << 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n\r\n}\r\n","import SorterWasm from './sorter.wasm';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let vertexCount;\r\n    let indexesOffset;\r\n    let positionsOffset;\r\n    let viewProjOffset;\r\n    let indexesOutOffset;\r\n    let sortBuffersOffset;\r\n    let wasmMemory;\r\n    let positions;\r\n    let countsZero;\r\n\r\n    let Constants;\r\n\r\n    function sort(vertexSortCount, vertexRenderCount, viewProj, cameraPosition) {\r\n\r\n        // console.time('WASM SORT');\r\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\r\n        const viewProjArray = new Int32Array(wasmMemory, viewProjOffset, 16);\r\n        for (let i = 0; i < 16; i++) {\r\n            viewProjArray[i] = Math.round(viewProj[i] * 1000.0);\r\n        }\r\n        const frequencies = new Uint32Array(wasmMemory, sortBuffersOffset + vertexCount * 4, Constants.DepthMapRange);\r\n        frequencies.set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesOffset, positionsOffset, sortBuffersOffset, viewProjOffset,\r\n                                         indexesOutOffset, cameraPosition[0], cameraPosition[1],\r\n                                         cameraPosition[2], Constants.DepthMapRange, vertexSortCount, vertexRenderCount, vertexCount);\r\n\r\n        // console.timeEnd('WASM SORT');\r\n\r\n        self.postMessage({\r\n            'sortDone': true,\r\n            'vertexSortCount': vertexSortCount,\r\n            'vertexRenderCount': vertexRenderCount\r\n        });\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.positions) {\r\n            positions = e.data.positions;\r\n            const floatPositions = new Float32Array(positions);\r\n            const intPositions = new Int32Array(vertexCount * 3);\r\n            for (let i = 0; i < vertexCount * 3; i++) {\r\n                intPositions[i] = Math.round(floatPositions[i] * 1000.0);\r\n            }\r\n            new Int32Array(wasmMemory, positionsOffset, vertexCount * 3).set(intPositions);\r\n            self.postMessage({\r\n                'sortSetupComplete': true,\r\n            });\r\n        } else if (e.data.sort) {\r\n            const renderCount = e.data.sort.vertexRenderCount || 0;\r\n            const sortCount = e.data.sort.vertexSortCount || 0;\r\n            sort(sortCount, renderCount, e.data.sort.view, e.data.sort.cameraPosition, e.data.sort.inIndexBuffer);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            vertexCount = e.data.init.vertexCount;\r\n\r\n            const INDEXES_BYTES_PER_ENTRY = Constants.BytesPerInt;\r\n            const POSITIONS_BYTES_PER_ENTRY = Constants.BytesPerFloat * 3;\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n            const memoryBytesPerVertex = INDEXES_BYTES_PER_ENTRY + POSITIONS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForVertices = vertexCount * memoryBytesPerVertex;\r\n            const memoryRequiredForSortBuffers = vertexCount * Constants.BytesPerInt * 2 +\r\n                                                 Constants.DepthMapRange * Constants.BytesPerInt * 2;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n            const totalRequiredMemory = memoryRequiredForVertices + memoryRequiredForSortBuffers + extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired * 2,\r\n                        maximum: totalPagesRequired * 3,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesOffset = 0;\r\n                positionsOffset = vertexCount * INDEXES_BYTES_PER_ENTRY;\r\n                viewProjOffset = positionsOffset + vertexCount * POSITIONS_BYTES_PER_ENTRY;\r\n                sortBuffersOffset = viewProjOffset + 16 * Constants.BytesPerFloat;\r\n                indexesOutOffset = sortBuffersOffset + vertexCount * Constants.BytesPerInt +\r\n                                   Constants.DepthMapRange * Constants.BytesPerInt * 2;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                self.postMessage({\r\n                    'sortSetupPhase1Complete': true,\r\n                    'inIndexBuffer': wasmMemory,\r\n                    'inIndexOffset': 0,\r\n                    'outIndexBuffer': wasmMemory,\r\n                    'outIndexOffset': indexesOutOffset\r\n                });\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(vertexCount, splatBufferRowBytes) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    const sorterWasmBinaryString = atob(SorterWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'vertexCount': vertexCount,\r\n            'splatBufferRowBytes': splatBufferRowBytes,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'DepthMapRange': Constants.DepthMapRange,\r\n                'MemoryPageSize': Constants.MemoryPageSize\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './PlyLoader.js';\r\nimport { SplatLoader } from './SplatLoader.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\nimport { LoadingSpinner } from './LoadingSpinner.js';\r\nimport { Octree } from './octree/Octree.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\n\r\nconst CENTER_COVARIANCE_DATA_TEXTURE_WIDTH = 4096;\r\nconst CENTER_COVARIANCE_DATA_TEXTURE_HEIGHT = 4096;\r\n\r\nconst COLOR_DATA_TEXTURE_WIDTH = 4096;\r\nconst COLOR_DATA_TEXTURE_HEIGHT = 2048;\r\n\r\nconst THREE_CAMERA_FOV = 60;\r\n\r\nexport class Viewer {\r\n\r\n    constructor(rootElement = null, cameraUp = [0, 1, 0], initialCameraPos = [0, 10, 15], initialCameraLookAt = [0, 0, 0],\r\n                splatAlphaRemovalThreshold = 0, controls = null, selfDrivenMode = true) {\r\n        this.rootElement = rootElement;\r\n        this.cameraUp = new THREE.Vector3().fromArray(cameraUp);\r\n        this.initialCameraPos = new THREE.Vector3().fromArray(initialCameraPos);\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(initialCameraLookAt);\r\n        this.splatAlphaRemovalThreshold = splatAlphaRemovalThreshold;\r\n        this.controls = controls;\r\n        this.selfDrivenMode = selfDrivenMode;\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.renderer = null;\r\n        this.selfDrivenUpdateFunc = this.update.bind(this);\r\n        this.resizeFunc = this.onResize.bind(this);\r\n\r\n        this.sortWorker = null;\r\n        this.vertexRenderCount = 0;\r\n        this.vertexSortCount = 0;\r\n\r\n        this.inIndexArray = null;\r\n\r\n        this.splatBuffer = null;\r\n        this.splatMesh = null;\r\n\r\n        this.octree = null;\r\n        this.octreeNodeMap = {};\r\n\r\n        this.sortRunning = false;\r\n    }\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        outDimensions.x = this.rootElement.offsetWidth;\r\n        outDimensions.y = this.rootElement.offsetHeight;\r\n    }\r\n\r\n    onResize = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            this.renderer.setSize(1, 1);\r\n            this.getRenderDimensions(renderDimensions);\r\n            this.camera.aspect = renderDimensions.x / renderDimensions.y;\r\n            this.camera.updateProjectionMatrix();\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n            this.updateSplatMeshUniforms();\r\n            this.updateSplatRenderTargetForRenderDimensions(renderDimensions);\r\n        };\r\n\r\n    }();\r\n\r\n    init() {\r\n\r\n        if (!this.rootElement) {\r\n            this.rootElement = document.createElement('div');\r\n            this.rootElement.style.width = '100%';\r\n            this.rootElement.style.height = '100%';\r\n            document.body.appendChild(this.rootElement);\r\n        }\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        this.getRenderDimensions(renderDimensions);\r\n\r\n        this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\r\n        this.camera.position.copy(this.initialCameraPos);\r\n        this.camera.lookAt(this.initialCameraLookAt);\r\n        this.camera.up.copy(this.cameraUp).normalize();\r\n\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.renderer = new THREE.WebGLRenderer({\r\n            antialias: false\r\n        });\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n        this.updateSplatRenderTargetForRenderDimensions(renderDimensions);\r\n        this.setupRenderTargetCopyObjects();\r\n\r\n        if (!this.controls) {\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n            this.controls.rotateSpeed = 0.5;\r\n            this.controls.maxPolarAngle = (0.9 * Math.PI) / 2;\r\n            this.controls.enableDamping = true;\r\n            this.controls.dampingFactor = 0.15;\r\n            this.controls.target.copy(this.initialCameraLookAt);\r\n        }\r\n\r\n        window.addEventListener('resize', this.resizeFunc, false);\r\n\r\n        this.rootElement.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(renderDimensions) {\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(renderDimensions.x, renderDimensions.y, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(renderDimensions.x, renderDimensions.y);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = color;\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: true,\r\n            transparent: true\r\n        });\r\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );\r\n    }\r\n\r\n    updateSplatMeshAttributes(colors, centerCovariances, vertexCount) {\r\n        const ELEMENTS_PER_TEXEL = 4;\r\n\r\n        const geometry = this.splatMesh.geometry;\r\n\r\n        const paddedCenterCovariances = new Float32Array(CENTER_COVARIANCE_DATA_TEXTURE_WIDTH *\r\n                                                         CENTER_COVARIANCE_DATA_TEXTURE_HEIGHT * ELEMENTS_PER_TEXEL);\r\n        for (let c = 0; c < vertexCount; c++) {\r\n            let destOffset = c * 12;\r\n            let srcOffset = c * 9;\r\n            for (let i = 0; i < 9; i++) {\r\n                paddedCenterCovariances[destOffset + i] = centerCovariances[srcOffset + i];\r\n            }\r\n        }\r\n        const centerCovarianceTexture = new THREE.DataTexture(paddedCenterCovariances, CENTER_COVARIANCE_DATA_TEXTURE_WIDTH,\r\n                                                              CENTER_COVARIANCE_DATA_TEXTURE_HEIGHT, THREE.RGBAFormat, THREE.FloatType);\r\n        centerCovarianceTexture.needsUpdate = true;\r\n        this.splatMesh.material.uniforms.centerCovarianceTexture.value = centerCovarianceTexture;\r\n\r\n        const paddedColors = new Float32Array(COLOR_DATA_TEXTURE_WIDTH * COLOR_DATA_TEXTURE_HEIGHT * ELEMENTS_PER_TEXEL);\r\n        paddedColors.set(colors);\r\n        const colorTexture = new THREE.DataTexture(paddedColors, COLOR_DATA_TEXTURE_WIDTH,\r\n                                                   COLOR_DATA_TEXTURE_HEIGHT, THREE.RGBAFormat, THREE.FloatType);\r\n        colorTexture.needsUpdate = true;\r\n        this.splatMesh.material.uniforms.colorTexture.value = colorTexture;\r\n\r\n        geometry.instanceCount = vertexCount;\r\n    }\r\n\r\n    updateSplatMeshIndexes(indexes, renderVertexCount) {\r\n        const geometry = this.splatMesh.geometry;\r\n\r\n        geometry.attributes.splatIndex.set(indexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n\r\n        geometry.instanceCount = renderVertexCount;\r\n    }\r\n\r\n    updateSplatMeshUniforms = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            const vertexCount = this.splatBuffer.getVertexCount();\r\n            if (vertexCount > 0) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.splatMesh.material.uniforms.viewport.value.set(renderDimensions.x, renderDimensions.y);\r\n                this.cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(THREE_CAMERA_FOV / 2.0 * THREE.MathUtils.DEG2RAD);\r\n                this.splatMesh.material.uniforms.focal.value.set(this.cameraFocalLength, this.cameraFocalLength);\r\n                this.splatMesh.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    loadFile(fileName) {\r\n        const loadingSpinner = new LoadingSpinner();\r\n        loadingSpinner.show();\r\n        return new Promise((resolve, reject) => {\r\n            let fileLoadPromise;\r\n            if (fileName.endsWith('.splat')) {\r\n                fileLoadPromise = new SplatLoader().loadFromFile(fileName);\r\n            } else if (fileName.endsWith('.ply')) {\r\n                fileLoadPromise = new PlyLoader().loadFromFile(fileName);\r\n            } else {\r\n                reject(new Error(`Viewer::loadFile -> File format not supported: ${fileName}`));\r\n            }\r\n            fileLoadPromise\r\n            .then((splatBuffer) => {\r\n\r\n                this.splatBuffer = splatBuffer;\r\n\r\n                this.splatBuffer.optimize(this.splatAlphaRemovalThreshold);\r\n                const vertexCount = this.splatBuffer.getVertexCount();\r\n                console.log(`Splat count: ${vertexCount}`);\r\n\r\n                this.splatBuffer.buildPreComputedBuffers();\r\n                this.splatMesh = this.buildMesh(this.splatBuffer);\r\n                this.splatMesh.frustumCulled = false;\r\n                this.splatMesh.renderOrder = 10;\r\n                this.updateSplatMeshUniforms();\r\n\r\n                this.octree = new Octree(8, 5000);\r\n                console.time('Octree build');\r\n                this.octree.processScene(splatBuffer);\r\n                console.timeEnd('Octree build');\r\n\r\n                let leavesWithVertices = 0;\r\n                let avgVertexCount = 0;\r\n                let maxVertexCount = 0;\r\n                let nodeCount = 0;\r\n\r\n                this.octree.visitLeaves((node) => {\r\n                    const vertexCount = node.data.indexes.length;\r\n                    if (vertexCount > 0) {\r\n                        this.octreeNodeMap[node.id] = node;\r\n                        avgVertexCount += vertexCount;\r\n                        maxVertexCount = Math.max(maxVertexCount, vertexCount);\r\n                        nodeCount++;\r\n                        leavesWithVertices++;\r\n                    }\r\n                });\r\n                console.log(`Octree leaves: ${this.octree.countLeaves()}`);\r\n                console.log(`Octree leaves with vertices:${leavesWithVertices}`);\r\n                avgVertexCount /= nodeCount;\r\n                console.log(`Avg vertex count per node: ${avgVertexCount}`);\r\n\r\n                this.vertexRenderCount = vertexCount;\r\n                loadingSpinner.hide();\r\n\r\n                this.sortWorker = createSortWorker(vertexCount, SplatBuffer.RowSizeBytes);\r\n                this.sortWorker.onmessage = (e) => {\r\n                    if (e.data.sortDone) {\r\n                        this.sortRunning = false;\r\n                        this.updateSplatMeshIndexes(this.outIndexArray, e.data.vertexRenderCount);\r\n                    } else if (e.data.sortCanceled) {\r\n                        this.sortRunning = false;\r\n                    } else if (e.data.sortSetupPhase1Complete) {\r\n                        console.log('Sorting web worker WASM setup complete.');\r\n                        const workerTransferPositionArray = new Float32Array(vertexCount * SplatBuffer.PositionComponentCount);\r\n                        this.splatBuffer.fillPositionArray(workerTransferPositionArray);\r\n                        this.sortWorker.postMessage({\r\n                            'positions': workerTransferPositionArray.buffer\r\n                        });\r\n                        this.outIndexArray = new Uint32Array(e.data.outIndexBuffer,\r\n                                                             e.data.outIndexOffset, this.splatBuffer.getVertexCount());\r\n                        this.inIndexArray = new Uint32Array(e.data.inIndexBuffer,\r\n                                                            e.data.inIndexOffset, this.splatBuffer.getVertexCount());\r\n                        for (let i = 0; i < vertexCount; i++) this.inIndexArray[i] = i;\r\n                    } else if (e.data.sortSetupComplete) {\r\n                        console.log('Sorting web worker ready.');\r\n                        const attributeData = this.getAttributeDataFromSplatBuffer(this.splatBuffer);\r\n                        this.updateSplatMeshIndexes(this.outIndexArray, this.splatBuffer.getVertexCount());\r\n                        this.updateSplatMeshAttributes(attributeData.colors,\r\n                                                       attributeData.centerCovariances, this.splatBuffer.getVertexCount());\r\n                        this.updateView(true, true);\r\n                        resolve();\r\n                    }\r\n                };\r\n\r\n            })\r\n            .catch((e) => {\r\n                reject(new Error(`Viewer::loadFile -> Could not load file ${fileName}`));\r\n            });\r\n        });\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let sphereMesh = new THREE.Mesh(sphereGeometry, this.buildDebugMaterial(0xff0000));\r\n        sphereMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(sphereMesh);\r\n        sphereMesh.position.set(-50, 0, 0);\r\n\r\n        sphereMesh = new THREE.Mesh(sphereGeometry, this.buildDebugMaterial(0xff0000));\r\n        sphereMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(sphereMesh);\r\n        sphereMesh.position.set(50, 0, 0);\r\n\r\n        sphereMesh = new THREE.Mesh(sphereGeometry, this.buildDebugMaterial(0x00ff00));\r\n        sphereMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(sphereMesh);\r\n        sphereMesh.position.set(0, 0, -50);\r\n\r\n        sphereMesh = new THREE.Mesh(sphereGeometry, this.buildDebugMaterial(0x00ff00));\r\n        sphereMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(sphereMesh);\r\n        sphereMesh.position.set(0, 0, 50);\r\n\r\n        sphereMesh = new THREE.Mesh(sphereGeometry, this.buildDebugMaterial(0xffaa00));\r\n        sphereMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(sphereMesh);\r\n        sphereMesh.position.set(5, 0, 5);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let separation = 10;\r\n        let boxColor = 0xBBBBBB;\r\n\r\n        let boxMesh = new THREE.Mesh(boxGeometry, this.buildDebugMaterial(boxColor));\r\n        boxMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(boxMesh);\r\n        boxMesh.position.set(-separation, 0, -separation);\r\n\r\n        boxMesh = new THREE.Mesh(boxGeometry, this.buildDebugMaterial(boxColor));\r\n        boxMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(boxMesh);\r\n        boxMesh.position.set(-separation, 0, separation);\r\n\r\n        boxMesh = new THREE.Mesh(boxGeometry, this.buildDebugMaterial(boxColor));\r\n        boxMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(boxMesh);\r\n        boxMesh.position.set(separation, 0, -separation);\r\n\r\n        boxMesh = new THREE.Mesh(boxGeometry, this.buildDebugMaterial(boxColor));\r\n        boxMesh.renderOrder = renderOrder;\r\n        debugMeshRoot.add(boxMesh);\r\n        boxMesh.position.set(separation, 0, separation);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n\r\n    gatherSceneNodes = function() {\r\n\r\n        const nodeRenderList = [];\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        const MaximumDistanceToSort = 125;\r\n\r\n        return function(gatherAllNodes) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / (2.0 * this.cameraFocalLength));\r\n            const fovYOver2 = Math.atan(renderDimensions.y / (2.0 * this.cameraFocalLength));\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\r\n\r\n            let nodeRenderCount = 0;\r\n            let verticesToCopy = 0;\r\n            const nodeCount = this.octree.nodesWithIndexes.length;\r\n            for (let i = 0; i < nodeCount; i++) {\r\n                const node = this.octree.nodesWithIndexes[i];\r\n                tempVector.copy(node.center).sub(this.camera.position);\r\n                const distanceToNode = tempVector.length();\r\n                tempVector.normalize();\r\n                tempVector.transformDirection(tempMatrix4);\r\n\r\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n                tempVector.set(0, 0, -1);\r\n                const cameraAngleXZDot = tempVector.dot(tempVectorXZ);\r\n                const cameraAngleYZDot = tempVector.dot(tempVectorYZ);\r\n\r\n                const ns = nodeSize(node);\r\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .4);\r\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .4);\r\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\r\n                    continue;\r\n                }\r\n                verticesToCopy += node.data.indexes.length;\r\n                nodeRenderList[nodeRenderCount] = node;\r\n                node.data.distanceToNode = distanceToNode;\r\n                nodeRenderCount++;\r\n            }\r\n\r\n            nodeRenderList.length = nodeRenderCount;\r\n            nodeRenderList.sort((a, b) => {\r\n                if (a.data.distanceToNode > b.data.distanceToNode) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            this.vertexRenderCount = verticesToCopy;\r\n            this.vertexSortCount = 0;\r\n            let currentByteOffset = 0;\r\n            for (let i = 0; i < nodeRenderCount; i++) {\r\n                const node = nodeRenderList[i];\r\n                const shouldSort = node.data.distanceToNode <= MaximumDistanceToSort;\r\n                if (shouldSort) {\r\n                    this.vertexSortCount += node.data.indexes.length;\r\n                }\r\n\r\n                const windowSizeInts = node.data.indexes.length;\r\n                let destView = new Uint32Array(this.inIndexArray.buffer, currentByteOffset, windowSizeInts);\r\n                destView.set(node.data.indexes);\r\n                currentByteOffset += windowSizeInts * Constants.BytesPerInt;\r\n            }\r\n\r\n        };\r\n\r\n    }();\r\n\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    fps = function() {\r\n\r\n        let lastCalcTime = performance.now() / 1000;\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            const currentTime = performance.now() / 1000;\r\n            const calcDelta = currentTime - lastCalcTime;\r\n            if (calcDelta >= 1.0) {\r\n                console.log('FPS: ' + frameCount);\r\n                frameCount = 0;\r\n                lastCalcTime = currentTime;\r\n            } else {\r\n                frameCount++;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    update() {\r\n        if (this.selfDrivenMode) {\r\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.controls.update();\r\n        this.updateView();\r\n\r\n        this.renderer.autoClear = false;\r\n        this.renderer.setClearColor(0.0, 0.0, 0.0, 0.0);\r\n\r\n\r\n        this.renderer.clear(true, true, true);\r\n        this.renderer.render(this.splatMesh, this.camera);\r\n\r\n        // this.fps();\r\n    }\r\n\r\n    updateView = function() {\r\n\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempVector2 = new THREE.Vector2();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n\r\n        return function(force = false, gatherAllNodes = false) {\r\n            if (!force) {\r\n                sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n                if (sortViewDir.dot(lastSortViewDir) > 0.95) return;\r\n                if (sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length() < 1.0) return;\r\n            }\r\n\r\n            this.getRenderDimensions(tempVector2);\r\n            tempMatrix.copy(this.camera.matrixWorld).invert();\r\n            tempMatrix.premultiply(this.camera.projectionMatrix);\r\n            cameraPositionArray[0] = this.camera.position.x;\r\n            cameraPositionArray[1] = this.camera.position.y;\r\n            cameraPositionArray[2] = this.camera.position.z;\r\n\r\n            if (!this.sortRunning) {\r\n                this.gatherSceneNodes(gatherAllNodes);\r\n                this.sortRunning = true;\r\n                this.sortWorker.postMessage({\r\n                    sort: {\r\n                        'view': tempMatrix.elements,\r\n                        'cameraPosition': cameraPositionArray,\r\n                        'vertexRenderCount': this.vertexRenderCount,\r\n                        'vertexSortCount': this.vertexSortCount,\r\n                        'inIndexBuffer': this.inIndexArray.buffer\r\n                    }\r\n                });\r\n                lastSortViewPos.copy(this.camera.position);\r\n                lastSortViewDir.copy(sortViewDir);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    buildMaterial() {\r\n\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            precision mediump float;\r\n\r\n            attribute uint splatIndex;\r\n            attribute vec4 splatColor;\r\n            attribute mat3 splatCenterCovariance;\r\n\r\n            uniform sampler2D centerCovarianceTexture;\r\n            uniform sampler2D colorTexture;\r\n            uniform vec2 focal;\r\n            uniform vec2 viewport;\r\n\r\n            uniform vec2 centerCovarianceTextureSize;\r\n            uniform vec2 colorTextureSize;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 screenCenterPos;\r\n            varying vec2 screenExtent;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n                vec2 samplerUV = vec2(0.0, 0.0);\r\n                float covarianceD = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n                samplerUV.y = float(floor(covarianceD)) / dimensions.y;\r\n                samplerUV.x = fract(covarianceD);\r\n                return samplerUV;\r\n            }\r\n\r\n            void main () {\r\n\r\n                vec4 sampledCenterCovarianceA = texture2D(centerCovarianceTexture, getDataUV(3, 0, centerCovarianceTextureSize));\r\n                vec4 sampledCenterCovarianceB = texture2D(centerCovarianceTexture, getDataUV(3, 1, centerCovarianceTextureSize));\r\n                vec4 sampledCenterCovarianceC = texture2D(centerCovarianceTexture, getDataUV(3, 2, centerCovarianceTextureSize));\r\n             \r\n                vec3 splatCenter = sampledCenterCovarianceA.xyz;\r\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCenterCovarianceA.w, sampledCenterCovarianceB.xy);\r\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCenterCovarianceB.zw, sampledCenterCovarianceC.r);\r\n\r\n                vec2 colorUV = vec2(0.0, 0.0);\r\n                float colorD = float(splatIndex * uint(4)) / 4.0 / colorTextureSize.x;\r\n                colorUV.y = float(int(colorD)) / colorTextureSize.y;\r\n                colorUV.x = fract(colorD);\r\n                vColor = texture2D(colorTexture, colorUV);\r\n                vPosition = position.xy * 2.0;\r\n\r\n                vec4 viewCenter = viewMatrix * vec4(splatCenter, 1.0);\r\n                vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n                float bounds = 1.2 * clipCenter.w;\r\n                if (clipCenter.z < -clipCenter.w || clipCenter.x < -bounds || clipCenter.x > bounds\r\n                    || clipCenter.y < -bounds || clipCenter.y > bounds) {\r\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                    return;\r\n                }\r\n    \r\n                mat3 Vrk = mat3(\r\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n                );\r\n\r\n                mat3 J = mat3(\r\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) / (viewCenter.z * viewCenter.z),\r\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) / (viewCenter.z * viewCenter.z),\r\n                    0., 0., 0.\r\n                );\r\n\r\n                mat3 W = transpose(mat3(viewMatrix));\r\n                mat3 T = W * J;\r\n                mat3 cov2Dm = transpose(T) * Vrk * T;\r\n                cov2Dm[0][0] += 0.3;\r\n                cov2Dm[1][1] += 0.3;\r\n\r\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n                // need cov2Dm[1][0] because it is a symetric matrix.\r\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n                // so that we can determine the 2D basis for the splat. This is done using the method described\r\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n                float a = cov2Dv.x;\r\n                float d = cov2Dv.z;\r\n                float b = cov2Dv.y;\r\n                float D = a * d - b * b;\r\n                float aPlusD = (a + d);\r\n                float aPlusDOver2 = 0.5 * aPlusD;\r\n                float eigenValue1 = aPlusDOver2 + sqrt(aPlusD * aPlusD / 4.0 - D);\r\n                float eigenValue2 = aPlusDOver2 - sqrt(aPlusD * aPlusD / 4.0 - D);\r\n\r\n                const float maxSplatSize = 512.0;\r\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n                vec2 eigenVector2 = normalize(vec2(b, eigenValue2 - a));\r\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\r\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\r\n\r\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) / viewport * 2.0;\r\n\r\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, 0.0, 1.0);\r\n\r\n            }`;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            precision mediump float;\r\n\r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 screenCenterPos;\r\n            varying vec2 screenExtent;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            void main () {\r\n                float A = -dot(vPosition, vPosition);\r\n                if (A < -4.0) discard;\r\n                vec3 color = vColor.rgb;\r\n                A = exp(A) * vColor.a;\r\n                gl_FragColor = vec4(A * color.rgb, A);\r\n            }`;\r\n\r\n        const uniforms = {\r\n            'centerCovarianceTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'colorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'centerCovarianceTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(CENTER_COVARIANCE_DATA_TEXTURE_WIDTH, CENTER_COVARIANCE_DATA_TEXTURE_HEIGHT)\r\n            },\r\n            'colorTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(COLOR_DATA_TEXTURE_WIDTH, COLOR_DATA_TEXTURE_HEIGHT)\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.CustomBlending,\r\n            blendEquation: THREE.AddEquation,\r\n            blendSrc: THREE.OneMinusDstAlphaFactor,\r\n            blendDst: THREE.OneFactor,\r\n            blendSrcAlpha: THREE.OneMinusDstAlphaFactor,\r\n            blendDstAlpha: THREE.OneFactor,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    buildGeomtery(splatBuffer) {\r\n\r\n        const vertexCount = splatBuffer.getVertexCount();\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n\r\n        const positionsArray = new Float32Array(6 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(2, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(0, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(5, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(4, 1.0, -1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, 1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        const splatIndexArray = new Uint32Array(vertexCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        const splatColorsArray = new Float32Array(vertexCount * 4);\r\n        const splatColors = new THREE.InstancedBufferAttribute(splatColorsArray, 4, false);\r\n        splatColors.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatColor', splatColors);\r\n\r\n        const splatCentersArray = new Float32Array(vertexCount * 9);\r\n        const splatCenters = new THREE.InstancedBufferAttribute(splatCentersArray, 9, false);\r\n        splatCenters.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatCenterCovariance', splatCenters);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    buildMesh(splatBuffer) {\r\n        const geometry = this.buildGeomtery(splatBuffer);\r\n        const material = this.buildMaterial();\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        return mesh;\r\n    }\r\n\r\n    getAttributeDataFromSplatBuffer(splatBuffer) {\r\n\r\n        const vertexCount = splatBuffer.getVertexCount();\r\n\r\n        const splatArray = new Float32Array(splatBuffer.getBufferData());\r\n        const pCovarianceArray = new Float32Array(splatBuffer.getPrecomputedCovarianceBufferData());\r\n        const pColorArray = new Float32Array(splatBuffer.getPrecomputedColorBufferData());\r\n        const color = new Float32Array(vertexCount * 4);\r\n        const centerCov = new Float32Array(vertexCount * 9);\r\n\r\n        for (let i = 0; i < vertexCount; i++) {\r\n\r\n            const centerCovBase = 9 * i;\r\n            const pCovarianceBase = 6 * i;\r\n            const colorBase = 4 * i;\r\n            const pcColorBase = 4 * i;\r\n            const splatArrayBase = SplatBuffer.RowSizeFloats * i;\r\n\r\n            centerCov[centerCovBase] = splatArray[splatArrayBase];\r\n            centerCov[centerCovBase + 1] = splatArray[splatArrayBase + 1];\r\n            centerCov[centerCovBase + 2] = splatArray[splatArrayBase + 2];\r\n\r\n            color[colorBase] = pColorArray[pcColorBase];\r\n            color[colorBase + 1] = pColorArray[pcColorBase + 1];\r\n            color[colorBase + 2] = pColorArray[pcColorBase + 2];\r\n            color[colorBase + 3] = pColorArray[pcColorBase + 3];\r\n\r\n            centerCov[centerCovBase + 3] = pCovarianceArray[pCovarianceBase];\r\n            centerCov[centerCovBase + 4] = pCovarianceArray[pCovarianceBase + 1];\r\n            centerCov[centerCovBase + 5] = pCovarianceArray[pCovarianceBase + 2];\r\n            centerCov[centerCovBase + 6] = pCovarianceArray[pCovarianceBase + 3];\r\n            centerCov[centerCovBase + 7] = pCovarianceArray[pCovarianceBase + 4];\r\n            centerCov[centerCovBase + 8] = pCovarianceArray[pCovarianceBase + 5];\r\n        }\r\n\r\n        return {\r\n            'colors': color,\r\n            'centerCovariances': centerCov\r\n        };\r\n\r\n    };\r\n}\r\n"],"names":[],"mappings":"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"}